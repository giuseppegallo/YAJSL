/*
 * YAJSL - Yet Another Java Swing Library
 *
 * Copyright (c) 2013 Giuseppe Gallo
 *
 * LICENSED UNDER:
 *
 *  The MIT License (MIT)
 *
 *  Copyright (c) 2013 Giuseppe Gallo
 *
 *  Permission is hereby granted, free of charge, to any person obtaining a copy
 *  of this software and associated documentation files (the "Software"), to deal
 *  in the Software without restriction, including without limitation the rights
 *  to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
 *  copies of the Software, and to permit persons to whom the Software is
 *  furnished to do so, subject to the following conditions:
 *
 *  The above copyright notice and this permission notice shall be included in all
 *  copies or substantial portions of the Software.
 *
 *  THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
 *  IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
 *  FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
 *  AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
 *  LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
 *  OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
 *  SOFTWARE.
 */
package YAJSL.Swing.Beans;

import java.awt.Color;
import java.awt.GradientPaint;
import java.awt.Graphics;
import java.awt.Graphics2D;
import java.awt.Insets;

/**
 * A panel showing a color gradient.
 * 
 * @author Giuseppe Gallo
 */
public class GradientPanel extends javax.swing.JPanel {

    /** The 1st color of the gradient */
    private Color color1 = Color.BLUE;

    /** The 2nd color of the gradient */
    private Color color2 = Color.CYAN;
    
    /** True if the order of the colors is inverted */
    private boolean inverted = false;

    /**
     * Creates new form GradientPanel
     */
    public GradientPanel() {
        initComponents();
    }

    /**
     * This method is called from within the constructor to initialize the form. WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(this);
        this.setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 200, Short.MAX_VALUE)
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 10, Short.MAX_VALUE)
        );
    }// </editor-fold>//GEN-END:initComponents

    @Override
    protected void paintComponent(Graphics g) {
        super.paintComponent(g);
        Graphics2D g2 = (Graphics2D)g;

        Insets insets = getInsets();

        Color c1 = (inverted) ? color2 : color1;
        Color c2 = (inverted) ? color1 : color2;
        
        GradientPaint gp = new GradientPaint(insets.left, 0, c1, getWidth() - insets.right, 0, c2);
        g2.setPaint(gp);
        g2.fillRect(insets.left, insets.top, getWidth() - insets.left - insets.right, getHeight() - insets.top - insets.bottom);
    }

    /**
     * Returns the 1st color of the gradient.
     * 
     * @return  the 1st color of the gradient
     */
    public Color getColor1() {
        return color1;
    }

    /**
     * Sets the 1st color of the gradient.
     *
     * @param color1  the 1st color of the gradient
     */
    public void setColor1(Color color1) {
        this.color1 = color1;
        repaint();
    }

    /**
     * Returns the 2nd color of the gradient.
     *
     * @return  the 2nd color of the gradient
     */
    public Color getColor2() {
        return color2;
    }

    /**
     * Sets the 2nd color of the gradient.
     *
     * @param color2  the 2nd color of the gradient
     */
    public void setColor2(Color color2) {
        this.color2 = color2;
        repaint();
    }

    /**
     * Returns true if the order of the colors is inverted.
     *
     * @return  true if the order of the colors is inverted
     */
    public boolean isInverted() {
        return inverted;
    }

    /**
     * Sets if the order of the colors is inverted.
     * 
     * @param inverted  true if the order of the colors is inverted
     */
    public void setInverted(boolean inverted) {
        this.inverted = inverted;
        repaint();
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    // End of variables declaration//GEN-END:variables
}
