/* 
 * YAJSL - Yet Another Java Swing Library
 *
 * Copyright (c) 2013 Giuseppe Gallo
 *
 * LICENSED UNDER:
 *
 *  The MIT License (MIT)
 *
 *  Copyright (c) 2013 Giuseppe Gallo
 *
 *  Permission is hereby granted, free of charge, to any person obtaining a copy
 *  of this software and associated documentation files (the "Software"), to deal
 *  in the Software without restriction, including without limitation the rights
 *  to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
 *  copies of the Software, and to permit persons to whom the Software is
 *  furnished to do so, subject to the following conditions:
 *
 *  The above copyright notice and this permission notice shall be included in all
 *  copies or substantial portions of the Software.
 *
 *  THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
 *  IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
 *  FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
 *  AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
 *  LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
 *  OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
 *  SOFTWARE.
 */
package YAJSL.Swing.Beans;

import YAJSL.Swing.Interfaces.Gridded;
import java.awt.Color;
import java.awt.Component;
import java.awt.Dimension;
import java.awt.Graphics;
import java.awt.Insets;
import java.awt.Point;
import java.awt.Rectangle;
import java.awt.event.ComponentEvent;
import java.awt.event.ComponentListener;

/**
 * Represents a panel with null layout in which a dotted grid is painted.<p>
 * It is meant to be used by specific components to be moved/resized according to the grid in this panel.
 * 
 * @author Giuseppe Gallo
 */
public class GridPanel extends javax.swing.JLayeredPane implements ComponentListener, Gridded {

    /**
     * Creates new form GridPanel
     */
    public GridPanel() {
        initComponents();
    }

    /**
     * This method is called from within the constructor to initialize the form. WARNING: Do NOT modify this code. The
     * content of this method is always regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                formMouseClicked(evt);
            }
        });
        setLayout(null);
    }// </editor-fold>//GEN-END:initComponents

    private void formMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_formMouseClicked
        requestFocus();
    }//GEN-LAST:event_formMouseClicked

    // Variables declaration - do not modify//GEN-BEGIN:variables
    // End of variables declaration//GEN-END:variables

    @Override
    protected void paintComponent(Graphics g) {
        super.paintComponent(g);
        
        Rectangle clips = g.getClipBounds();
        
        int startX = (clips.x/gridSizeX) * gridSizeX;
        if (clips.x % gridSizeX != 0) startX += gridSizeX;
        
        int startY = (clips.y/gridSizeY) * gridSizeY;
        if (clips.y % gridSizeY != 0) startY += gridSizeY;
        
        int endX = ((clips.x + clips.width - 1)/gridSizeX) * gridSizeX;
        int endY = ((clips.y + clips.height - 1)/gridSizeY) * gridSizeY;
        
        g.setColor(gridColor);
        for (int x = startX; x <= endX; x += gridSizeX) {
            for (int y = startY; y <= endY; y += gridSizeY) {
                g.drawLine(x, y, x, y);
            }
        }
    }

    /**
     * Returns the horizontal size of the grid.
     * 
     * @return  the horizontal size of the grid
     */
    public int getGridSizeX() {
        return gridSizeX;
    }

    /**
     * Sets the horizontal size of the grid.
     * 
     * @param gridSizeX  the horizontal size of the grid
     */
    public void setGridSizeX(int gridSizeX) {
        this.gridSizeX = gridSizeX;
        repaint();
    }

    /**
     * Returns the vertical size of the grid.
     * 
     * @return  the vertical size of the grid
     */
    public int getGridSizeY() {
        return gridSizeY;
    }

    /**
     * Sets the vertical size of the grid.
     * 
     * @param gridSizeY  the vertical size of the grid
     */
    public void setGridSizeY(int gridSizeY) {
        this.gridSizeY = gridSizeY;
        repaint();
    }

    /**
     * Returns the horizontal offset of the grid.
     * 
     * @return  the horizontal offset of the grid
     */
    public int getOffsetX() {
        return offsetX;
    }

    /**
     * Sets the horizontal offset of the grid.
     * 
     * @param offsetX  the horizontal offset of the grid
     */
    public void setOffsetX(int offsetX) {
        this.offsetX = offsetX;
        repaint();
    }

    /**
     * Returns the vertical offset of the grid.
     * 
     * @return  the vertical offset of the grid
     */
    public int getOffsetY() {
        return offsetY;
    }

    /**
     * Sets the vertical offset of the grid.
     * 
     * @param offsetY  the vertical offset of the grid
     */
    public void setOffsetY(int offsetY) {
        this.offsetY = offsetY;
        repaint();
    }

    /**
     * Returns the color of the grid.
     * 
     * @return  the color of the grid
     */
    public Color getGridColor() {
        return gridColor;
    }

    /**
     * Sets the color of the grid.
     * 
     * @param gridColor  the color of the grid
     */
    public void setGridColor(Color gridColor) {
        this.gridColor = gridColor;
        repaint();
    }

    /**
     * Returns the closest point on the grid, starting from a point not necessarily aligned with it.
     * 
     * @param p  the original point
     * @return  the closest point on the grid, starting from a point not necessarily aligned with it
     */
    @Override
    public Point getGridPoint(Point p) {
        return new Point(Math.round(p.x/(float)gridSizeX) * gridSizeX, Math.round(p.y/(float)gridSizeY) * gridSizeY);
    }

    @Override
    public Component add(Component comp) {
        Component c = super.add(comp);
        comp.addComponentListener(this);
        return c;
    }

    /**
     * Resizes a component.
     * 
     * @param c  the component
     */
    private void resize(Component c) {
        int sizeX = 0;
        int sizeY = 0;
        Component[] cmps = getComponents();
        
        for (Component cmp : cmps) {
            Rectangle r = cmp.getBounds();
            if (sizeX < r.x + r.width - 1) sizeX = r.x + r.width - 1;
            if (sizeY < r.y + r.height - 1) sizeY = r.y + r.height - 1;
        }
        
        Insets i = getInsets();
        sizeX += i.left + i.right;
        sizeY += i.top + i.bottom;
        
        Dimension d = getMinimumSize();
        if (sizeX < d.width) sizeX = d.width;
        if (sizeY < d.height) sizeX = d.height;
        
        final Dimension nd = new Dimension(sizeX, sizeY);
        setPreferredSize(nd);
        setSize(nd);
        revalidate();
    }
    
    @Override
    public void componentResized(ComponentEvent e) {
        resize(e.getComponent());
    }

    @Override
    public void componentMoved(ComponentEvent e) {
        resize(e.getComponent());
    }

    @Override
    public void componentShown(ComponentEvent e) {
        // Nothing to do
    }

    @Override
    public void componentHidden(ComponentEvent e) {
        // Nothing to do
    }
    
    // ========== PROPERTIES ===========================================================================================
    /** The horizontal size of the grid */
    protected int gridSizeX = 10;

    /** The vertical size of the grid */
    protected int gridSizeY = 10;
    
    /** The horizontal offset at which the grid starts */
    protected int offsetX = -5;
    
    /** The vertical offset at which the grid starts */
    protected int offsetY = -5;
    
    /** The color of the grid */
    protected Color gridColor = Color.GRAY;
    // =================================================================================================================
}
